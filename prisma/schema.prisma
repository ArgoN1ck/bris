generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("PSQL_URL")
}

model migrations {
  installed_rank Int      @id(map: "__migrations_pk")
  version        String?  @db.VarChar(50)
  description    String   @db.VarChar(200)
  type           String   @db.VarChar(20)
  script         String   @db.VarChar(1000)
  checksum       Int?
  installed_by   String   @db.VarChar(100)
  installed_on   DateTime @default(now()) @db.Timestamp(6)
  execution_time Int
  success        Boolean

  @@index([success], map: "__migrations_s_idx")
  @@map("__migrations")
}

model Articles {
  id             String      @id(map: "PK_ARTICLES") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  title          String      @db.VarChar(255)
  description    String      @default("")
  body           String      @default("")
  favoritesCount Int         @default(0)
  authorId       String?     @db.Uuid
  createdAt      DateTime    @default(now()) @db.Timestamp(6)
  updatedAt      DateTime    @default(now()) @db.Timestamp(6)
  deletedAt      DateTime?   @db.Timestamp(6)
  Users          Users?      @relation(fields: [authorId], references: [id], onUpdate: NoAction, map: "FK_ARTICLES__AUTHOR_ID")
  Favorites      Favorites[]

  @@index([title], map: "IDX_ARTICLES__TITLE")
}

model Favorites {
  userId    String   @db.Uuid
  articleId String   @db.Uuid
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @default(now()) @db.Timestamp(6)
  Articles  Articles @relation(fields: [articleId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_FAVORITES__ARTICLE_ID")
  Users     Users    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_FAVORITES__USER_ID")

  @@id([userId, articleId], map: "PK_FAVORITES")
  @@index([articleId], map: "IDX_FAVORITES__ARTICLE_ID")
  @@index([userId], map: "IDX_FAVORITES__USER_ID")
}

model Follows {
  followerId                       String   @db.Uuid
  followingId                      String   @db.Uuid
  createdAt                        DateTime @default(now()) @db.Timestamp(6)
  updatedAt                        DateTime @default(now()) @db.Timestamp(6)
  Users_Follows_followerIdToUsers  Users    @relation("Follows_followerIdToUsers", fields: [followerId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_FOLLOWS__FOLLOWER_ID")
  Users_Follows_followingIdToUsers Users    @relation("Follows_followingIdToUsers", fields: [followingId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_FOLLOWS__FOLLOWING_ID")

  @@id([followerId, followingId], map: "PK_FOLLOWS")
  @@index([followerId], map: "IDX_FOLLOWS__FOLLOWER_ID")
  @@index([followingId], map: "IDX_FOLLOWS__FOLLOWING_ID")
}

model Profiles {
  id        String    @id(map: "PK_PROFILES") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  bio       String    @default("")
  image     String    @default("") @db.VarChar(255)
  userId    String    @unique @db.Uuid
  createdAt DateTime  @default(now()) @db.Timestamp(6)
  updatedAt DateTime  @default(now()) @db.Timestamp(6)
  deletedAt DateTime? @db.Timestamp(6)
  Users     Users     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_PROFILES__USER_ID")
}

model Tags {
  id        String    @id(map: "PK_TAGS") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  title     String    @db.VarChar(255)
  createdAt DateTime  @default(now()) @db.Timestamp(6)
  updatedAt DateTime  @default(now()) @db.Timestamp(6)
  deletedAt DateTime? @db.Timestamp(6)

  @@index([title], map: "IDX_TAGS__TITLE")
}

model Users {
  id                                 String      @id(map: "PK_USERS") @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  username                           String      @unique(map: "IDX_USERS__USERNAME") @db.VarChar(100)
  email                              String      @unique(map: "IDX_USERS__EMAIL") @db.VarChar(255)
  password                           String      @db.VarChar(255)
  createdAt                          DateTime    @default(now()) @db.Timestamp(6)
  updatedAt                          DateTime    @default(now()) @db.Timestamp(6)
  deletedAt                          DateTime?   @db.Timestamp(6)
  Articles                           Articles[]
  Favorites                          Favorites[]
  Follows_Follows_followerIdToUsers  Follows[]   @relation("Follows_followerIdToUsers")
  Follows_Follows_followingIdToUsers Follows[]   @relation("Follows_followingIdToUsers")
  Profiles                           Profiles?
}
